package attributes

// Goht supports the Ruby 1.9 hash style of attributes. The other styles
// such as HTML style, or Ruby rocket style are not supported. This should
// not be a problem as the Ruby 1.9 style is very similar to the style used
// by Go for maps.

@goht StaticAttrs() {
	%p{class: "foo", id: "bar"} This is a paragraph.
}

@haml HamlStaticAttrs() {
	%p{class: "foo", id: "bar"} This is a paragraph.
}

@slim SlimStaticAttrs() {
	p{class: "foo", id: "bar"} This is a paragraph.
}

// You can also use dynamic values for your attributes. Dynamic attribute
// values share the same syntax as the interpolated values. A hash and a
// pair of curly braces.

var myDynamicValue = "foo"

@goht DynamicAttrs() {
	%p{class: #{myDynamicValue}, id: "bar"} This is a paragraph.
}

@haml HamlDynamicAttrs() {
	%p{class: #{myDynamicValue}, id: "bar"} This is a paragraph.
}

@slim SlimDynamicAttrs() {
	p{class: #{myDynamicValue}, id: "bar"} This is a paragraph.
}

// There are times when you have a lot of attributes and you want to keep
// your lines short. You can break up your attributes into multiple lines
// without any additional syntax.
// You may include a comma after the last attribute if you wish but it is
// not required.

@goht MultilineAttrs() {
	%p{
		class: #{myDynamicValue},
		id: "bar",
	} This is a paragraph.
}

@haml HamlMultilineAttrs() {
	%p{
		class: #{myDynamicValue},
		id: "bar",
	} This is a paragraph.
}

@slim SlimMultilineAttrs() {
	p{
		class: #{myDynamicValue},
		id: "bar",
	} This is a paragraph.
}

// You may include as much whitespace as you wish between the attribute,
// operator, value, and attribute separator. The following are all valid.

@goht WhitespaceAttrs() {
	%p{class: #{myDynamicValue}, id: "bar"} This is a paragraph.
	%p{class:#{myDynamicValue},id:"bar"} This is a paragraph.
	%p{class: #{myDynamicValue},id: "bar"} This is a paragraph.
	%p{class :#{myDynamicValue}, id   : "bar"} This is a paragraph.
}

@haml HamlWhitespaceAttrs() {
	%p{class: #{myDynamicValue}, id: "bar"} This is a paragraph.
	%p{class:#{myDynamicValue},id:"bar"} This is a paragraph.
	%p{class: #{myDynamicValue},id: "bar"} This is a paragraph.
	%p{class :#{myDynamicValue}, id   : "bar"} This is a paragraph.
}

@slim SlimWhitespaceAttrs() {
	p{class: #{myDynamicValue}, id: "bar"} This is a paragraph.
	p{class:#{myDynamicValue},id:"bar"} This is a paragraph.
	p{class: #{myDynamicValue},id: "bar"} This is a paragraph.
	p{class :#{myDynamicValue}, id   : "bar"} This is a paragraph.
}

// The dynamic attribute values may also include formatting rules just like
// the interpolated values. The attribute values are always evaluated as
// strings and are always rendered inside double quotes in the final HTML.

var intVar = 10

@goht FormattedValue() {
	%textarea{rows: #{%d intVar}, cols: "80"}
}

@haml HamlFormattedValue() {
	%textarea{rows: #{%d intVar}, cols: "80"}
}

@slim SlimFormattedValue() {
	textarea{rows: #{%d intVar}, cols: "80"}
}
