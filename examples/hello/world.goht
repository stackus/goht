package hello
// An example of several Haml features supported by Goht.

var terms = []string{"foo", "bar", "baz", "fizz", "buzz", "quux"}

@goht termsWrapper(term string) {
	%p=@children
	%p And it was passed in as well #{term}
}

@haml hamlTermsWrapper(term string) {
	%p=@children
	%p And it was passed in as well #{term}
}

@slim slimTermsWrapper(term string) {
	p=@children
	p And it was passed in as well #{term}
}

@goht World() {
	!!!
	%html{lang: "en"}
		%head
			%meta{charset: "utf-8"}
			%title Hello World
			:css
				body {
					color: white;
					font-family: sans-serif;
					background-color: #333;
				}
				.term {
					font-weight: bold;
					color: #99f;
				}
		%body
			%h1 Hello World
			%p the following will loop a slice of strings and will pass each string into a child template
			- for _, term := range terms
				=@render termsWrapper(term)
					%p.term= term
}

@haml HamlWorld() {
	!!!
	%html{lang: "en"}
		%head
			%meta{charset: "utf-8"}
			%title Hello World
			:css
				body {
					color: white;
					font-family: sans-serif;
					background-color: #333;
				}
				.term {
					font-weight: bold;
					color: #99f;
				}
		%body
			%h1 Hello World
			%p the following will loop a slice of strings and will pass each string into a child template
			- for _, term := range terms
				=@render hamlTermsWrapper(term)
					%p.term= term
}

@slim SlimWorld() {
	doctype
	html{lang: "en"}
		head
			meta{charset: "utf-8"}
			title Hello World
			:css
				body {
					color: white;
					font-family: sans-serif;
					background-color: #333;
				}
				.term {
					font-weight: bold;
					color: #99f;
				}
		body
			h1 Hello World
			p the following will loop a slice of strings and will pass each string into a child template
			- for _, term := range terms
				=@render slimTermsWrapper(term)
					p.term= term
}
