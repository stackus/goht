// Code generated by GoHT v0.6.0 - DO NOT EDIT.
// https://github.com/stackus/goht

package commands

import "context"
import "io"
import "github.com/stackus/goht"

// You include other templates using the `@render` command. It takes
// the name of the template to render.
// The `@render` command is used in combination with the rendering
// code syntax `=`.

func RenderExample() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		if __err = ChildrenExample().Render(ctx, __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n<p>the other template was rendered above.</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func HamlRenderExample() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		if __err = ChildrenExample().Render(ctx, __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n<p>the other template was rendered above.</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func SlimRenderExample() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		if __err = ChildrenExample().Render(ctx, __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n<p>the other template was rendered above.</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

// You may also include nested content to be rendered by the template.
// You do not need to include any opening or closing braces when you
// are passing content on to be rendered by another template.

func RenderWithChildrenExample() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>The other template will be rendered below.</p>\n"); __err != nil {
			return
		}
		__var1 := goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
			__buf, __isBuf := __w.(goht.Buffer)
			if !__isBuf {
				__buf = goht.GetBuffer()
				defer goht.ReleaseBuffer(__buf)
			}
			if _, __err = __buf.WriteString("<span>this content will be rendered by the other template.</span>\n"); __err != nil {
				return
			}
			if !__isBuf {
				_, __err = io.Copy(__w, __buf)
			}
			return
		})
		if __err = ChildrenExample().Render(goht.PushChildren(ctx, __var1), __buf); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func HamlRenderWithChildrenExample() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>The other template will be rendered below.</p>\n"); __err != nil {
			return
		}
		__var1 := goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
			__buf, __isBuf := __w.(goht.Buffer)
			if !__isBuf {
				__buf = goht.GetBuffer()
				defer goht.ReleaseBuffer(__buf)
			}
			if _, __err = __buf.WriteString("<span>this content will be rendered by the other template.</span>\n"); __err != nil {
				return
			}
			if !__isBuf {
				_, __err = io.Copy(__w, __buf)
			}
			return
		})
		if __err = ChildrenExample().Render(goht.PushChildren(ctx, __var1), __buf); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func SlimRenderWithChildrenExample() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>The other template will be rendered below.</p>\n"); __err != nil {
			return
		}
		__var1 := goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
			__buf, __isBuf := __w.(goht.Buffer)
			if !__isBuf {
				__buf = goht.GetBuffer()
				defer goht.ReleaseBuffer(__buf)
			}
			if _, __err = __buf.WriteString("<span>this content will be rendered by the other template.</span>\n"); __err != nil {
				return
			}
			if !__isBuf {
				_, __err = io.Copy(__w, __buf)
			}
			return
		})
		if __err = ChildrenExample().Render(goht.PushChildren(ctx, __var1), __buf); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}
