// Code generated by GoHT - DO NOT EDIT.
// https://github.com/stackus/goht

package tags

import "context"
import "io"
import "github.com/stackus/goht"

// There are several tags that are self closing, meaning they
// don't have or require a closing tag. For example, the <img> tag
// is used to embed an image in an HTML document. It is self closing
// and has no closing tag.
// Self closing tags may not have any content nested inside them.
// Nesting content inside a self closing tag will cause the parser
// to display an error.

func SelfClosing() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<img src=\"logo.png\" alt=\"logo\"><p>\nA paragraph is not self closing.\n<img src=\"logo.png\" alt=\"logo\"></p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func HamlSelfClosing() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<img src=\"logo.png\" alt=\"logo\"><p>\nA paragraph is not self closing.\n<img src=\"logo.png\" alt=\"logo\"></p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func SlimSelfClosing() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<img src=\"logo.png\" alt=\"logo\"><p>\n<A>paragraph is not self closing.</A>\n<img src=\"logo.png\" alt=\"logo\"></p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

// You may also use the self closing tag syntax to create a tag
// that is not self closing. This is useful for creating tags
// that are not known by the parser.
// This is done by adding a forward slash to the end of the tag.
// Known tags:
// 	"area", "base", "basefont", "br", "col",
//  "embed", "frame", "hr", "img", "input",
// 	"isindex", "keygen", "link", "menuitem",
// 	"meta", "param", "source", "track", "wbr",

func AlsoSelfClosing() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<isNowSelfClosing>"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func HamlAlsoSelfClosing() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<isNowSelfClosing>"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func SlimAlsoSelfClosing() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<isNowSelfClosing>"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}
