package unescape

// The text from variables are assumed to need HTML escaping. If you
// want to include raw HTML, or you have already processed the variable
// then you will need to unescape the text. This is accomplished with
// the `!` operator.
// Use care when using the unescape operator. You should only use it
// when you are sure that the text is safe. If you are unsure, then
// you should use the default escaping.

@goht UnescapeCode() {
	%p= "This is <em>NOT</em> unescaped HTML. (Ampersands everywhere!)"
	%p!= "This <em>is</em> unescaped HTML."
}

@haml HamlUnescapeCode() {
	%p= "This is <em>NOT</em> unescaped HTML. (Ampersands everywhere!)"
	%p!= "This <em>is</em> unescaped HTML."
}

@slim SlimUnescapeCode() {
	p= "This is <em>is</em> escaped HTML. (Ampersands everywhere!)"
	p== "This is <em>NOT</em> escaped HTML."
}

// It can also affect the interpolated values.

@goht UnescapeInterpolation() {
	- var html = "<em>is</em>"
	%p This #{html} is escaped. (Ampersands everywhere!)
	%p! This #{html} is NOT escaped.
}

@haml HamlUnescapeInterpolation() {
	- var html = "<em>is</em>"
	%p This #{html} is escaped. (Ampersands everywhere!)
	%p! This #{html} is NOT escaped.
}

// The plain text that you write into your Goht templates will not be
// altered by the addition of the `!` operator. It is expected that this
// text has already been HTML escaped properly.

@goht UnescapeText() {
	%p This <em>is</em> HTML.
	%p! This <em>is</em> HTML.
}

@haml HamlUnescapeText() {
	%p This <em>is</em> HTML.
	%p! This <em>is</em> HTML.
}
