package formatting
// Normally, only strings are allowed as the value printed using the
// interpolated value in the template. However, if you provide a format
// before the value that you want outputted then it will be used to
// convert and format the value into a string.

// See: https://pkg.go.dev/fmt

// Include the format that you want, immediately followed by a comma,
// and then the value that you want to format.

var intVar = 123
var floatVar = 123.456
var boolVar = true
var stringVar = "Hello"

@goht IntExample() {
	%p The integer is (#{%d intVar}).
	%p The integer is (#{%b intVar}) in binary.
	%p The integer is (#{%o intVar}) in octal.
	%p The integer is (#{%x intVar}) in hex.
	%p The integer is (#{%X intVar}) in hex with uppercase.
	%p The integer is (#{%c intVar}) as a character.
}

@goht FloatExample() {
	%p The float is (#{%f floatVar}).
	%p The float is (#{%e floatVar}) in scientific notation.
	%p The float is (#{%.2f floatVar}) with 2 decimal places.
	%p The float is (#{%9.2f floatVar}) with 2 decimal places and padded to 9 characters.
	%p The float is (#{%-9.2f floatVar}) with 2 decimal places and padded to 9 characters and left aligned.
	%p The float is (#{%09.2f floatVar}) with 2 decimal places and padded to 9 characters with 0s.
}

@goht BoolExample() {
	%p The bool is (#{%t boolVar}).
}

@goht StringExample() {
	%p The string is (#{stringVar}). Strings do not require any additional formatting.
	%p The string is (#{%q stringVar}) quoted.
	%p The string is (#{%x stringVar}) as hex.
	%p The string is (#{%X stringVar}) as hex with uppercase.
	%p The string is (#{%s stringVar}) as is.
	%p The string is (#{%.4s stringVar}), truncated to 4 characters.
	%p The string is (#{%6s stringVar}), padded to 6 characters.
	%p The string is (#{%6.4s stringVar}), truncated to 4 characters and padded to 6 characters.
	%p The string is (#{%6.4q stringVar}), truncated to 4 characters and padded to 6 characters and quoted.
}
